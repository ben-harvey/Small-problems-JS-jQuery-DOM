/*
input: string rep a list of shorthand numbers
output: an array of numbers
rules:
  only the significant part of the next number is given
    if the next digit is smaller than (or equal to?) the current digit,
    the full number is generated by appending any digits to make the current digit greater
    than the previous number.

    eg
    7, 2 --> 7, 12
    4, 1 --> 4, 11
  ranges are expanded, then the last number of the range is used to evaluate the next number
    eg
    1-3, 1 --> 1, 2, 3, 1 --> 1, 2, 3, 11
  same for 2 consecutive ranges
    1-3, 1-2 --> 1, 2, 3, 1, 2 --> 1, 2, 3, 11, 12
  ranges can have a shorthand second digit
  9:2 --> 9, 10, 11, 12
  for two contiguous ranges
    1:5:2
      the 5 is there to make sure that the 2 is treated as 12 and not as 2
      expand first range
        1, 2, 3, 4, 5:2
      expand second range
        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
      watch out for duplicates of the middle range value

  works for hundreds and tens
    109-2 --> 109, 110, 111, 112
    104 - 02 **
      leading zeros are significant in this case
      next digit is 202 in this case

data structure:
  arrays of strings because 02 needs to be handled
  eg 02 plus 10 = 22 if digits
    but
    '1' + '02' = '102'

algorithm:
  working left to right
    expand ranges
    flatten to single array
    fill in missing numbers

  expand range(start, end)
    if start is less than end
      expand digits
    else
      add n to end number
      expand digits

    expand digits(start, end)
      return inclusive range


  first divide input string into ranges and single numbers
  eg 1..3, 1..2 becomes [[1,3], [1,2]]
    [1:5:2, 4] becomes [[1,5], [5, 2], 4]
    104-02 becomes [104, 02]
      track the digit to add to complete a number
      eg 1, 3, 1, 2, 1
      part to add = 0
        1, 02, 03.
      if next digit is less than current digit
      get length of
        part to add += 1
        part to add now equals 1
        1 becomes 11
    2 becomes 12

      if a digit
*/
const RANGE_DELIMITERS = /\:|\-|\.\./

const expandRange = function ([start, end], nextPart) {
  const result = [];
  const startnum = +start;
  let endnum = +end;

  if (startnum > endnum) {
    endnum += 10;
  }

  for(let i = startnum; i <= endnum; i += 1) {
    result.push(nextPart + String(i));
  }

  end = nextPart + end;
  return result;
};

// console.log(expandRange([2, 1], '0'));

const shorthand = function (list) {
  let entries = list.split(', ');
   entries = entries.map(entry =>  {
    if (RANGE_DELIMITERS.test(entry)) { return entry.split(RANGE_DELIMITERS) };
    return entry;
  });
  let nextPart = '10';

  const expanded = entries.reduce((result, entry, index, entries) => {
    if(Array.isArray(entry)) {
      if(+entry[0] < +result.slice(-1)) { nextPart = String((+nextPart + 1))}
      return result.concat(expandRange(entry, nextPart))
    }

    if(+entry[0] < +entries[index - 1]) { nextPart = String((+nextPart + 1))}

    result.push(nextPart + entry);
    return result;
  }, [])

  return expanded;
}

// console.log(shorthand("1, 3, 7, 2, 4, 1")); // --> 1, 3, 7, 12, 14, 21
// console.log(shorthand("1..3, 1-2")); // --> 1, 2, 3, 11, 12
// console.log(shorthand("1:5:2")); // --> 1, 2, 3, 4, 5, 6, ... 12
console.log(shorthand("104-2")); // --> 104, 105, ... 112 --11
// console.log(shorthand("104-02")); // --> 104, 105, ... 202 --2
// console.log(shorthand("114-12")); // --> 104, 105, ... 212

// console.log(shorthand("545, 64:11")); // --> 545, 564, 565, .. 611
